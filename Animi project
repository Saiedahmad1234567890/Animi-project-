import React, { useState, useEffect } from "react"; import { motion, AnimatePresence } from "framer-motion";

// TeriMuskaanAnimation.jsx // Single-file React component (Tailwind + Framer Motion) that animates the "Teri Muskaan" anime scenes. // - Default export a React component // - Uses Tailwind classes for styling (no imports needed) // - Uses framer-motion for smooth transitions and character/scene animations // - Characters are simple SVG illustrations so their look remains consistent across scenes

// USAGE: import TeriMuskaanAnimation from './TeriMuskaanAnimation.jsx' and render in your app.

const scenes = [ { id: 1, title: "School Courtyard", subtitle: "सुबह - चेरी ब्लॉसम", bg: "spring-courtyard", dialog: [ { who: "Narrator", text: "हर किसी की ज़िंदगी में वो एक पल आता है… जब सब कुछ थम जाता है।" }, { who: "Aarav", text: "ये… कौन है? इतनी सुकून भरी मुस्कान…" }, ], }, { id: 2, title: "Classroom", subtitle: "पहली मुलाक़ात", bg: "sunlit-classroom", dialog: [ { who: "Teacher", text: "क्लास, ये है साया।" }, { who: "Aarav", text: "हाय! मैं आरव हूँ।" }, { who: "Saya", text: "हाय, मैं यहाँ नई हूँ।" }, ], }, { id: 3, title: "Riverside Sketch", subtitle: "नदी किनारा", bg: "riverside", dialog: [ { who: "Narrator", text: "आरव ड्रॉइंग करता है; साया आकर उसे देखती है।" }, { who: "Saya", text: "तुम ड्रॉइंग करते हो?" }, { who: "Aarav", text: "हां… बस शौक है।" }, ], }, { id: 4, title: "Friendship Montage", subtitle: "छोटे-छोटे पल", bg: "montage", dialog: [], }, { id: 5, title: "Rooftop Confession", subtitle: "शाम का इज़हार", bg: "rooftop-sunset", dialog: [ { who: "Aarav", text: "साया… मैं तुम्हें दोस्त से ज़्यादा समझता हूँ…" }, { who: "Saya", text: "मुझे पहले से पता था…" }, ], }, { id: 6, title: "Rain Moment", subtitle: "बारिश पर पल", bg: "rainy-rooftop", dialog: [ { who: "Narrator", text: "बारिश में आरव अपनी जैकेट साया के ऊपर डाल देता है।" }, ], }, { id: 7, title: "School Festival", subtitle: "रात और लाइट्स", bg: "festival-night", dialog: [ { who: "Saya", text: "मुझे भी तुम अच्छे लगते हो।" }, ], }, { id: 8, title: "Riverside Sunset (Ending)", subtitle: "हैप्पी एंडिंग", bg: "sunset-river", dialog: [ { who: "Saya", text: "तुम्हारी वजह से मुझे मेरा रास्ता मिला।" }, { who: "Aarav", text: "और मुझे मेरी मंज़िल… तुम।" }, ], }, ];

function CharacterSVG({ name, pose = "neutral" }) { // Simple, consistent SVGs for Aarav and Saya. Keep them minimal so generator consistency is preserved. const commonHead = ( <circle cx="50" cy="45" r="28" fill="#ffd8c4" stroke="#b57e6a" strokeWidth="1" /> );

if (name === "Aarav") { return ( <svg viewBox="0 0 120 160" className="w-40 h-56"> {commonHead} {/* Hair /} <path d="M22 35 C35 10,85 10,98 35 L98 45 C85 25,35 25,22 45 Z" fill="#111" /> {/ Eyes /} <circle cx="38" cy="48" r="4" fill="#5b3d2e" /> <circle cx="68" cy="48" r="4" fill="#5b3d2e" /> {/ Body */} <rect x="20" y="75" width="80" height="60" rx="10" fill="#fff" stroke="#cbd5e1" /> <text x="60" y="115" textAnchor="middle" fontSize="9" fill="#4b5563">Aarav</text> </svg> ); }

// Saya SVG return ( <svg viewBox="0 0 120 160" className="w-40 h-56"> {commonHead} {/* Hair /} <path d="M18 30 C40 0,80 0,102 30 L102 60 C80 25,40 25,18 60 Z" fill="#7b3f3f" /> {/ Eyes /} <ellipse cx="38" cy="50" rx="5" ry="3" fill="#0b3b6f" /> <ellipse cx="68" cy="50" rx="5" ry="3" fill="#0b3b6f" /> {/ Body */} <rect x="20" y="75" width="80" height="60" rx="10" fill="#fff" stroke="#cbd5e1" /> <text x="60" y="115" textAnchor="middle" fontSize="9" fill="#4b5563">Saya</text> </svg> ); }

export default function TeriMuskaanAnimation() { const [index, setIndex] = useState(0); const [playing, setPlaying] = useState(true);

useEffect(() => { if (!playing) return; const timer = setTimeout(() => { setIndex((i) => (i + 1 < scenes.length ? i + 1 : i)); }, 6000); // 6 seconds per scene by default return () => clearTimeout(timer); }, [index, playing]);

const current = scenes[index];

const bgVariants = { hidden: { opacity: 0, scale: 1.02 }, visible: { opacity: 1, scale: 1 }, exit: { opacity: 0, scale: 0.98 }, };

const textVariants = { hidden: { opacity: 0, y: 16 }, visible: { opacity: 1, y: 0 }, };

return ( <div className="min-h-screen bg-gradient-to-b from-sky-50 to-pink-50 p-6 flex items-center justify-center"> <div className="w-full max-w-4xl bg-white/60 backdrop-blur-md rounded-2xl shadow-2xl p-6 grid grid-cols-3 gap-6"> {/* Left: Scene preview */} <div className="col-span-2 rounded-xl overflow-hidden relative bg-gray-100 p-4 flex flex-col"> <div className="flex items-center justify-between mb-3"> <div> <h2 className="text-2xl font-semibold text-gray-800">{current.title}</h2> <p className="text-sm text-gray-500">{current.subtitle}</p> </div> <div className="flex gap-2 items-center"> <button className="px-3 py-1 rounded-md bg-white/80 border" onClick={() => setIndex(Math.max(0, index - 1))} > Prev </button> <button className="px-3 py-1 rounded-md bg-white/80 border" onClick={() => setIndex(Math.min(scenes.length - 1, index + 1))} > Next </button> </div> </div>

<div className="flex-1 grid grid-cols-2 gap-4 items-center">
        <AnimatePresence mode="wait">
          <motion.div
            key={current.id}
            className="col-span-2 rounded-xl overflow-hidden relative h-80 bg-gradient-to-br from-white via-pink-50 to-sky-50"
            variants={bgVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            transition={{ duration: 0.8 }}
          >
            {/* Background illustration (decorative) */}
            <div className="absolute inset-0 pointer-events-none">
              {/* Stylized background depends on scene.bg */}
              <BackgroundVisual variant={current.bg} />
            </div>

            {/* Characters centered */}
            <div className="absolute inset-0 flex items-end justify-center pb-6 gap-6 z-10">
              <motion.div initial={{ y: 40, opacity: 0 }} animate={{ y: 0, opacity: 1 }} transition={{ delay: 0.2 }}>
                <CharacterSVG name="Aarav" />
              </motion.div>

              <motion.div initial={{ y: 40, opacity: 0 }} animate={{ y: 0, opacity: 1 }} transition={{ delay: 0.35 }}>
                <CharacterSVG name="Saya" />
              </motion.div>
            </div>

            {/* Decorative petals */}
            <FallingPetals />
          </motion.div>
        </AnimatePresence>

        {/* Dialogue box area (right) */}
        <div className="col-span-2 mt-2">
          <div className="rounded-xl bg-white/80 p-4 shadow-inner">
            <AnimatePresence mode="wait">
              <motion.div key={index} initial="hidden" animate="visible" exit="hidden" variants={textVariants} transition={{ duration: 0.6 }}>
                {current.dialog.length === 0 ? (
                  <div className="text-gray-600 italic">(मोंटाज - हँसी, साथ की झलकियाँ)</div>
                ) : (
                  current.dialog.map((d, i) => (
                    <div key={i} className="mb-3">
                      <div className="text-sm text-indigo-700 font-semibold">{d.who}</div>
                      <div className="text-gray-800 mt-1">{d.text}</div>
                    </div>
                  ))
                )}
              </motion.div>
            </AnimatePresence>
          </div>
        </div>
      </div>
    </div>

    {/* Right: Controls & Scene List */}
    <div className="col-span-1 flex flex-col gap-4">
      <div className="rounded-xl p-4 bg-white/70">
        <div className="flex items-center justify-between mb-3">
          <h3 className="font-semibold text-gray-800">Controls</h3>
          <div className="text-sm text-gray-500">Scene {index + 1}/{scenes.length}</div>
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => setPlaying((p) => !p)}
            className="flex-1 px-3 py-2 rounded-lg bg-indigo-600 text-white"
          >
            {playing ? "Pause" : "Play"}
          </button>
          <button
            onClick={() => { setIndex(0); setPlaying(false); }}
            className="px-3 py-2 rounded-lg border"
          >
            Reset
          </button>
        </div>
      </div>

      <div className="rounded-xl p-4 bg-white/70 flex-1 overflow-auto">
        <h4 className="font-semibold mb-2">Scenes</h4>
        <ul className="space-y-2 text-sm">
          {scenes.map((s, i) => (
            <li key={s.id}>
              <button
                className={`w-full text-left px-3 py-2 rounded-md ${i === index ? "bg-indigo-100" : "hover:bg-gray-50"}`}
                onClick={() => setIndex(i)}
              >
                <div className="font-medium">{s.title}</div>
                <div className="text-xs text-gray-500">{s.subtitle}</div>
              </button>
            </li>
          ))}
        </ul>
      </div>

      <div className="rounded-xl p-4 bg-white/70">
        <h4 className="font-semibold">Notes</h4>
        <p className="text-sm text-gray-600 mt-2">This single-file component uses simple SVG characters to keep the characters' appearance identical across scenes.
        Replace with richer assets if needed.</p>
      </div>
    </div>
  </div>
</div>

); }

function BackgroundVisual({ variant }) { // Very lightweight decorative backgrounds. Customize as needed. switch (variant) { case "spring-courtyard": return ( <svg className="w-full h-full" preserveAspectRatio="none" viewBox="0 0 800 400"> <defs> <linearGradient id="g1" x1="0" x2="1"> <stop offset="0" stopColor="#fff7ed" /> <stop offset="1" stopColor="#ffeef8" /> </linearGradient> </defs> <rect width="800" height="400" fill="url(#g1)" /> <g opacity="0.75"> <ellipse cx="120" cy="330" rx="120" ry="24" fill="#c7e1d6" /> <ellipse cx="680" cy="330" rx="120" ry="24" fill="#c7e1d6" /> </g> {/* Cherry blossom tree simplified */} <g> <rect x="60" y="150" width="18" height="160" rx="6" fill="#6b4226" /> <circle cx="70" cy="120" r="60" fill="#ffd7e2" /> </g> </svg> ); case "sunlit-classroom": return ( <div className="w-full h-full flex items-start justify-center"> <div className="w-full h-full bg-[url('data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 800 400\'><rect width=\'800\' height=\'400\' fill=\'#fffef6\'/><rect x=\'0\' y=\'40\' width=\'800\' height=\'120\' fill=\'#f6f3ff\'/></svg>')] bg-cover" /> </div> ); case "riverside": return ( <svg className="w-full h-full" preserveAspectRatio="none" viewBox="0 0 800 400"> <rect width="800" height="400" fill="#fef9ff" /> <rect y="240" width="800" height="120" fill="#cfe8ff" /> <circle cx="680" cy="80" r="40" fill="#fff2b2" opacity="0.9" /> </svg> ); case "montage": return ( <div className="w-full h-full flex items-center justify-center text-gray-400 italic">Montage of small moments</div> ); case "rooftop-sunset": return ( <svg className="w-full h-full" preserveAspectRatio="none" viewBox="0 0 800 400"> <defs> <linearGradient id="sunset" x1="0" x2="0" y1="0" y2="1"> <stop offset="0" stopColor="#ffecd2" /> <stop offset="1" stopColor="#ffd1e8" /> </linearGradient> </defs> <rect width="800" height="400" fill="url(#sunset)" /> <circle cx="640" cy="320" r="80" fill="#ffbe6b" opacity="0.25" /> </svg> ); case "rainy-rooftop": return ( <div className="w-full h-full bg-[linear-gradient(180deg,#e6f0ff,rgba(255,255,255,0.6))]" /> ); case "festival-night": return ( <svg className="w-full h-full" preserveAspectRatio="none" viewBox="0 0 800 400"> <rect width="800" height="400" fill="#0f172a" /> <g fill="#ffdb4d" opacity="0.9"> <circle cx="120" cy="80" r="6" /> <circle cx="200" cy="60" r="6" /> <circle cx="280" cy="100" r="6" /> <circle cx="360" cy="70" r="6" /> </g> </svg> ); case "sunset-river": return ( <svg className="w-full h-full" preserveAspectRatio="none" viewBox="0 0 800 400"> <rect width="800" height="400" fill="#fff3e6" /> <rect y="220" width="800" height="180" fill="#ffd8b8" /> </svg> ); default: return <div className="w-full h-full bg-white" />; } }

function FallingPetals() { // Decorative animated petals using CSS animation (kept simple) return ( <div className="pointer-events-none absolute inset-0 overflow-hidden"> <div className="absolute left-10 top-0 animate-fall-slow">🌸</div> <div className="absolute left-44 top-0 animate-fall-medium">🌸</div> <div className="absolute left-72 top-0 animate-fall-fast">🌸</div> <style>{@keyframes fallSlow { 0% { transform: translateY(-10px) rotate(0deg); opacity:0 } 10%{opacity:1} 100%{ transform: translateY(420px) rotate(360deg); opacity:0.9 } } @keyframes fallMedium { 0% { transform: translateY(-5px) rotate(0deg); opacity:0 } 10%{opacity:1} 100%{ transform: translateY(420px) rotate(540deg); opacity:0.9 } } @keyframes fallFast { 0% { transform: translateY(-20px) rotate(0deg); opacity:0 } 10%{opacity:1} 100%{ transform: translateY(420px) rotate(720deg); opacity:0.9 } } .animate-fall-slow { animation: fallSlow 7s linear infinite; font-size:24px } .animate-fall-medium { animation: fallMedium 5.8s linear infinite; font-size:20px } .animate-fall-fast { animation: fallFast 4.6s linear infinite; font-size:18px }}</style> </div> ); }

